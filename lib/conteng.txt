import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:tacres_draft/homePage.dart';

class recordACT extends StatelessWidget {
  // const recordACT({Key? key}) : super(key: key);

  final Stream<QuerySnapshot> act_record =
      FirebaseFirestore.instance.collection('act-record').snapshots();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('ACT Record', style: TextStyle(fontSize: 17.0)),
        backgroundColor: Colors.white,
        centerTitle: true,
        titleTextStyle: Theme.of(context).textTheme.headline6,
        leading: Builder(
          builder: (BuildContext context) {
            return IconButton(
              icon: const Icon(
                Icons.arrow_back_ios,
                color: Colors.black,
              ),
              onPressed: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) {
                    return HomePage();
                  }),
                );
              },
              tooltip: MaterialLocalizations.of(context).openAppDrawerTooltip,
            );
          },
        ),
      ),
      body: Container(
          margin: EdgeInsets.fromLTRB(0, 30, 0, 0),
          child: StreamBuilder<QuerySnapshot>(
              stream: act_record,
              builder: (BuildContext context,
                  AsyncSnapshot<QuerySnapshot> snapshot) {
                if (snapshot.hasError) {
                  return Text('Something went wrong.');
                }
                if (snapshot.connectionState == ConnectionState.waiting) {
                  return Text('Loading');
                }

                final data = snapshot.requireData;
                return ListView.builder(
                  itemCount: data.size,
                  itemBuilder: (context, index) {
                    return Container(
                        height: 60,
                        color: Colors.white,
                        child: Center(
                            child: Row(
                          mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                          children: <Widget>[
                            Flexible(
                              flex: 2,
                              fit: FlexFit.tight,
                              child: Column(
                                children: [
                                  Text(data.docs[index]['ACT_Date']),
                                ],
                              ),
                            ),
                            const VerticalDivider(
                              color: Colors.grey,
                            ),
                            Flexible(
                              flex: 1,
                              fit: FlexFit.tight,
                              child: Column(
                                children: [
                                  Text(
                                      data.docs[index]['ACT_Score'].toString()),
                                ],
                              ),
                            ),
                            const VerticalDivider(
                              color: Colors.grey,
                            ),
                            Flexible(
                              flex: 2,
                              fit: FlexFit.tight,
                              child: Column(
                                children: [
                                  Text(data.docs[index]['ACT_Desc'].toString(),
                                      textAlign: TextAlign.center),
                                ],
                              ),
                            ),
                            const VerticalDivider(
                              color: Colors.grey,
                            ),
                            Flexible(
                              flex: 2,
                              fit: FlexFit.tight,
                              child: Column(
                                children: [
                                  Text(data.docs[index]['ACT_Weather']
                                      .toString())
                                ],
                              ),
                            ),
                          ],
                        )));
                  },
                );
              })),
    );
  }
}


//////////////////////////////////////////////////

onPressed: () {
                // function for update current location
                lat = position.latitude.toString();
                lon = position.longitude.toString();
                setState(() async {
                  _determinePosition();
                  placemarks = await placemarkFromCoordinates(
                      position.latitude, position.longitude);
                  city = placemarks.elementAt(0).locality.toString();
                  getData();
                });
              },



///////////////////////////////////////////////

onPressed: () => showDialog<String>(
                context: context,
                builder: (BuildContext context) => AlertDialog(
                  title: const Text('Update Your Current Location?'),
                  actions: <Widget>[
                    TextButton(
                      onPressed: () => Navigator.pop(context, 'No'),
                      child: const Text('No'),
                    ),
                    TextButton(
                      // onPressed: () => Navigator.pop(context, 'OK'),
                      onPressed: () {
                        Navigator.pop(context, 'Yes');
                        lat = position.latitude.toString();
                        lon = position.longitude.toString();
                        setState(() async {
                          _determinePosition();
                          placemarks = await placemarkFromCoordinates(
                              position.latitude, position.longitude);
                          city = placemarks.elementAt(0).locality.toString();
                          getData();
                        });
                      },

                      child: const Text('Yes'),
                    ),
                  ],
                ),
              ),